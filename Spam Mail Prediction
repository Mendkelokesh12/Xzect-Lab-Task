{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8849703,"sourceType":"datasetVersion","datasetId":5326860}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/lokeshmendake/spam-mail-prediction?scriptVersionId=186685773\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\n# for text data preprocessing\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# for model buidling\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-03T12:56:04.750386Z","iopub.execute_input":"2024-07-03T12:56:04.751113Z","iopub.status.idle":"2024-07-03T12:56:07.830624Z","shell.execute_reply.started":"2024-07-03T12:56:04.751077Z","shell.execute_reply":"2024-07-03T12:56:07.829671Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/spam-mail-prediction-dataset/Mail_Data.csv') \ndf ","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:07.832758Z","iopub.execute_input":"2024-07-03T12:56:07.83331Z","iopub.status.idle":"2024-07-03T12:56:07.887866Z","shell.execute_reply.started":"2024-07-03T12:56:07.833275Z","shell.execute_reply":"2024-07-03T12:56:07.88672Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('The size of Dataframe is: ', df.shape)\nprint('-'*100)\nprint('The Column Name, Record Count and Data Types are as follows: ')\ndf.info()\nprint('-'*100)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:07.889208Z","iopub.execute_input":"2024-07-03T12:56:07.889591Z","iopub.status.idle":"2024-07-03T12:56:07.915195Z","shell.execute_reply.started":"2024-07-03T12:56:07.889556Z","shell.execute_reply":"2024-07-03T12:56:07.913981Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Defining numerical & categorical columns\nnumeric_features = [feature for feature in df.columns if df[feature].dtype != 'O']\ncategorical_features = [feature for feature in df.columns if df[feature].dtype == 'O']\n\n# print columns\nprint('We have {} numerical features : {}'.format(len(numeric_features), numeric_features))\nprint('\\nWe have {} categorical features : {}'.format(len(categorical_features), categorical_features))","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:07.917886Z","iopub.execute_input":"2024-07-03T12:56:07.9182Z","iopub.status.idle":"2024-07-03T12:56:07.93269Z","shell.execute_reply.started":"2024-07-03T12:56:07.918174Z","shell.execute_reply":"2024-07-03T12:56:07.93173Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Missing Value Presence in different columns of DataFrame are as follows : ')\nprint('-'*100)\ntotal=df.isnull().sum().sort_values(ascending=False)\npercent=(df.isnull().sum()/df.isnull().count()*100).sort_values(ascending=False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent'])","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:07.933755Z","iopub.execute_input":"2024-07-03T12:56:07.93408Z","iopub.status.idle":"2024-07-03T12:56:07.963027Z","shell.execute_reply.started":"2024-07-03T12:56:07.934052Z","shell.execute_reply":"2024-07-03T12:56:07.962023Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Summary Statistics of numerical features for DataFrame are as follows:')\nprint('-'*100)\ndf.describe(include='object')","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:07.964517Z","iopub.execute_input":"2024-07-03T12:56:07.964813Z","iopub.status.idle":"2024-07-03T12:56:07.987603Z","shell.execute_reply.started":"2024-07-03T12:56:07.964788Z","shell.execute_reply":"2024-07-03T12:56:07.986514Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Replace the null values with a null string (Only for demonstration, here it is not neede)\ndf = df.where((pd.notnull(df)),'')\ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:07.989024Z","iopub.execute_input":"2024-07-03T12:56:07.989415Z","iopub.status.idle":"2024-07-03T12:56:08.011655Z","shell.execute_reply.started":"2024-07-03T12:56:07.989378Z","shell.execute_reply":"2024-07-03T12:56:08.010396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# label spam mail as 0; ham mail as 1;\n\ndf.loc[df['Category'] == 'spam', 'Category',] = 0\ndf.loc[df['Category'] == 'ham', 'Category',] = 1\ndf\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:08.012974Z","iopub.execute_input":"2024-07-03T12:56:08.013394Z","iopub.status.idle":"2024-07-03T12:56:08.034903Z","shell.execute_reply.started":"2024-07-03T12:56:08.013359Z","shell.execute_reply":"2024-07-03T12:56:08.033941Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Category'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:08.035992Z","iopub.execute_input":"2024-07-03T12:56:08.036332Z","iopub.status.idle":"2024-07-03T12:56:08.053845Z","shell.execute_reply.started":"2024-07-03T12:56:08.036305Z","shell.execute_reply":"2024-07-03T12:56:08.052764Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"porter_stemmer = PorterStemmer()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:08.057126Z","iopub.execute_input":"2024-07-03T12:56:08.057436Z","iopub.status.idle":"2024-07-03T12:56:08.066773Z","shell.execute_reply.started":"2024-07-03T12:56:08.057404Z","shell.execute_reply":"2024-07-03T12:56:08.065814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def stemming(content):\n    stemmed_content = re.sub('[^a-zA-Z]',' ',content)\n    stemmed_content = stemmed_content.lower()\n    stemmed_content = stemmed_content.split()\n    stemmed_content = [porter_stemmer.stem(word) for word in stemmed_content if not word in stopwords.words('english')]\n    stemmed_content = ' '.join(stemmed_content)\n    return stemmed_content","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:08.068068Z","iopub.execute_input":"2024-07-03T12:56:08.068511Z","iopub.status.idle":"2024-07-03T12:56:08.082697Z","shell.execute_reply.started":"2024-07-03T12:56:08.068477Z","shell.execute_reply":"2024-07-03T12:56:08.081574Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Message'] = df['Message'].apply(stemming)\ndf['Message']","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:08.083889Z","iopub.execute_input":"2024-07-03T12:56:08.084266Z","iopub.status.idle":"2024-07-03T12:56:20.268548Z","shell.execute_reply.started":"2024-07-03T12:56:08.084231Z","shell.execute_reply":"2024-07-03T12:56:20.267516Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Creating Feature Matrix (Independent Variables) & Target Variable (Dependent Variable)\n\n# separating the data and labels\nX = df['Message'] # Feature matrix\ny = df['Category'] # Target variable\n\nX","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.26955Z","iopub.execute_input":"2024-07-03T12:56:20.269823Z","iopub.status.idle":"2024-07-03T12:56:20.277794Z","shell.execute_reply.started":"2024-07-03T12:56:20.2698Z","shell.execute_reply":"2024-07-03T12:56:20.27647Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.279452Z","iopub.execute_input":"2024-07-03T12:56:20.279846Z","iopub.status.idle":"2024-07-03T12:56:20.300938Z","shell.execute_reply.started":"2024-07-03T12:56:20.27981Z","shell.execute_reply":"2024-07-03T12:56:20.299998Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# convert Y_train and Y_test values as integers\ny = y.astype('int')","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.301968Z","iopub.execute_input":"2024-07-03T12:56:20.302288Z","iopub.status.idle":"2024-07-03T12:56:20.312463Z","shell.execute_reply.started":"2024-07-03T12:56:20.302263Z","shell.execute_reply":"2024-07-03T12:56:20.311525Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Feature Extraction\n# Transform the text data to feature vectors that can be used as input to the Logistic regression\n\nvectorizer = TfidfVectorizer()\nvectorizer.fit(X)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.313632Z","iopub.execute_input":"2024-07-03T12:56:20.314266Z","iopub.status.idle":"2024-07-03T12:56:20.398551Z","shell.execute_reply.started":"2024-07-03T12:56:20.31423Z","shell.execute_reply":"2024-07-03T12:56:20.397647Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = vectorizer.transform(X)\nprint(X)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.399995Z","iopub.execute_input":"2024-07-03T12:56:20.400283Z","iopub.status.idle":"2024-07-03T12:56:20.467351Z","shell.execute_reply.started":"2024-07-03T12:56:20.400259Z","shell.execute_reply":"2024-07-03T12:56:20.466375Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Train-Test Split\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=45)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.468614Z","iopub.execute_input":"2024-07-03T12:56:20.469035Z","iopub.status.idle":"2024-07-03T12:56:20.479409Z","shell.execute_reply.started":"2024-07-03T12:56:20.468976Z","shell.execute_reply":"2024-07-03T12:56:20.478486Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X.shape, X_train.shape, X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.480819Z","iopub.execute_input":"2024-07-03T12:56:20.481135Z","iopub.status.idle":"2024-07-03T12:56:20.486247Z","shell.execute_reply.started":"2024-07-03T12:56:20.48111Z","shell.execute_reply":"2024-07-03T12:56:20.485317Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y.shape, y_train.shape, y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.487609Z","iopub.execute_input":"2024-07-03T12:56:20.488325Z","iopub.status.idle":"2024-07-03T12:56:20.496553Z","shell.execute_reply.started":"2024-07-03T12:56:20.488286Z","shell.execute_reply":"2024-07-03T12:56:20.495609Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models = [LogisticRegression, SVC, DecisionTreeClassifier, RandomForestClassifier]\naccuracy_scores = []\nprecision_scores = []\nrecall_scores = []\nf1_scores = []\n\nfor model in models:\n    classifier = model().fit(X_train, y_train)\n    y_pred = classifier.predict(X_test)\n    \n    accuracy_scores.append(accuracy_score(y_test, y_pred))\n    precision_scores.append(precision_score(y_test, y_pred))\n    recall_scores.append(recall_score(y_test, y_pred))\n    f1_scores.append(f1_score(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:20.497697Z","iopub.execute_input":"2024-07-03T12:56:20.497996Z","iopub.status.idle":"2024-07-03T12:56:26.454467Z","shell.execute_reply.started":"2024-07-03T12:56:20.497971Z","shell.execute_reply":"2024-07-03T12:56:26.453563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"classification_metrics_df = pd.DataFrame({\n    \"Model\": [\"Logistic Regression\", \"SVM\", \"Decision Tree\", \"Random Forest\"],\n    \"Accuracy\": accuracy_scores,\n    \"Precision\": precision_scores,\n    \"Recall\": recall_scores,\n    \"F1 Score\": f1_scores\n})\n\nclassification_metrics_df.set_index('Model', inplace=True)\nclassification_metrics_df","metadata":{"execution":{"iopub.status.busy":"2024-07-03T12:56:26.455829Z","iopub.execute_input":"2024-07-03T12:56:26.456653Z","iopub.status.idle":"2024-07-03T12:56:26.470113Z","shell.execute_reply.started":"2024-07-03T12:56:26.456614Z","shell.execute_reply":"2024-07-03T12:56:26.469048Z"},"trusted":true},"execution_count":null,"outputs":[]}]}