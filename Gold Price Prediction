{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8849770,"sourceType":"datasetVersion","datasetId":5326893}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/lokeshmendake/gold-price-prediction?scriptVersionId=186687320\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn import datasets\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-03T13:08:27.034823Z","iopub.execute_input":"2024-07-03T13:08:27.035148Z","iopub.status.idle":"2024-07-03T13:08:30.232196Z","shell.execute_reply.started":"2024-07-03T13:08:27.035126Z","shell.execute_reply":"2024-07-03T13:08:30.231165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Laoding Data\n\ndf = pd.read_csv('/kaggle/input/gold-price-prediction-datasets/Gold_Price_Data.csv') \ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.233534Z","iopub.execute_input":"2024-07-03T13:08:30.233942Z","iopub.status.idle":"2024-07-03T13:08:30.288813Z","shell.execute_reply.started":"2024-07-03T13:08:30.23392Z","shell.execute_reply":"2024-07-03T13:08:30.287563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('The size of Dataframe is: ', df.shape)\nprint('-'*100)\nprint('The Column Name, Record Count and Data Types are as follows: ')\ndf.info()\nprint('-'*100)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.291474Z","iopub.execute_input":"2024-07-03T13:08:30.291991Z","iopub.status.idle":"2024-07-03T13:08:30.319394Z","shell.execute_reply.started":"2024-07-03T13:08:30.291949Z","shell.execute_reply":"2024-07-03T13:08:30.318097Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Defining numerical & categorical columns\nnumeric_features = [feature for feature in df.columns if df[feature].dtype != 'O']\ncategorical_features = [feature for feature in df.columns if df[feature].dtype == 'O']\n\n# print columns\nprint('We have {} numerical features : {}'.format(len(numeric_features), numeric_features))\nprint('\\nWe have {} categorical features : {}'.format(len(categorical_features), categorical_features))","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.322165Z","iopub.execute_input":"2024-07-03T13:08:30.322577Z","iopub.status.idle":"2024-07-03T13:08:30.345598Z","shell.execute_reply.started":"2024-07-03T13:08:30.322544Z","shell.execute_reply":"2024-07-03T13:08:30.344474Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Missing Value Presence in different columns of DataFrame are as follows : ')\nprint('-'*100)\ntotal=df.isnull().sum().sort_values(ascending=False)\npercent=(df.isnull().sum()/df.isnull().count()*100).sort_values(ascending=False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent'])","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.34671Z","iopub.execute_input":"2024-07-03T13:08:30.347028Z","iopub.status.idle":"2024-07-03T13:08:30.379185Z","shell.execute_reply.started":"2024-07-03T13:08:30.347002Z","shell.execute_reply":"2024-07-03T13:08:30.377775Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Summary Statistics of numerical features for DataFrame are as follows:')\nprint('-'*100)\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.380782Z","iopub.execute_input":"2024-07-03T13:08:30.381152Z","iopub.status.idle":"2024-07-03T13:08:30.42924Z","shell.execute_reply.started":"2024-07-03T13:08:30.381123Z","shell.execute_reply":"2024-07-03T13:08:30.428337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data Cleaning & Preprocessing\n# Dropping Date Column\n\ndf = df.drop(['Date'], axis=1)\ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.431686Z","iopub.execute_input":"2024-07-03T13:08:30.43208Z","iopub.status.idle":"2024-07-03T13:08:30.448615Z","shell.execute_reply.started":"2024-07-03T13:08:30.432055Z","shell.execute_reply":"2024-07-03T13:08:30.447798Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Correlation Understanding Heatmap\n\ncorrelation = df.corr()\ncorrelation","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.449684Z","iopub.execute_input":"2024-07-03T13:08:30.450024Z","iopub.status.idle":"2024-07-03T13:08:30.481569Z","shell.execute_reply.started":"2024-07-03T13:08:30.449997Z","shell.execute_reply":"2024-07-03T13:08:30.479999Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (8,8))\nsns.heatmap(correlation, cbar=True, square=True, fmt='.1f',annot=True, annot_kws={'size':8}, cmap='Blues')","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.482871Z","iopub.execute_input":"2024-07-03T13:08:30.483272Z","iopub.status.idle":"2024-07-03T13:08:30.860381Z","shell.execute_reply.started":"2024-07-03T13:08:30.483244Z","shell.execute_reply":"2024-07-03T13:08:30.859242Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Model Building\n# Creating Feature Matrix (Independent Variables) & Target Variable (Dependent Variable)\n\n# separating the data and labels\nX = df.drop(columns = ['GLD'], axis=1) # Feature matrix\ny = df['GLD'] # Target variable\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.864257Z","iopub.execute_input":"2024-07-03T13:08:30.864564Z","iopub.status.idle":"2024-07-03T13:08:30.872218Z","shell.execute_reply.started":"2024-07-03T13:08:30.864542Z","shell.execute_reply":"2024-07-03T13:08:30.871177Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.873799Z","iopub.execute_input":"2024-07-03T13:08:30.874154Z","iopub.status.idle":"2024-07-03T13:08:30.891942Z","shell.execute_reply.started":"2024-07-03T13:08:30.874116Z","shell.execute_reply":"2024-07-03T13:08:30.890886Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.893062Z","iopub.execute_input":"2024-07-03T13:08:30.893382Z","iopub.status.idle":"2024-07-03T13:08:30.908059Z","shell.execute_reply.started":"2024-07-03T13:08:30.893355Z","shell.execute_reply":"2024-07-03T13:08:30.906935Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data Standardization\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.909395Z","iopub.execute_input":"2024-07-03T13:08:30.90984Z","iopub.status.idle":"2024-07-03T13:08:30.928987Z","shell.execute_reply.started":"2024-07-03T13:08:30.909808Z","shell.execute_reply":"2024-07-03T13:08:30.927822Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"standardized_data = scaler.transform(X)\nstandardized_data","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.930452Z","iopub.execute_input":"2024-07-03T13:08:30.93081Z","iopub.status.idle":"2024-07-03T13:08:30.941551Z","shell.execute_reply.started":"2024-07-03T13:08:30.930782Z","shell.execute_reply":"2024-07-03T13:08:30.940458Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = standardized_data\nX","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.942581Z","iopub.execute_input":"2024-07-03T13:08:30.942863Z","iopub.status.idle":"2024-07-03T13:08:30.964128Z","shell.execute_reply.started":"2024-07-03T13:08:30.942841Z","shell.execute_reply":"2024-07-03T13:08:30.962792Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train-Test Split\n\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=45)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:30.965899Z","iopub.execute_input":"2024-07-03T13:08:30.966218Z","iopub.status.idle":"2024-07-03T13:08:31.110905Z","shell.execute_reply.started":"2024-07-03T13:08:30.96619Z","shell.execute_reply":"2024-07-03T13:08:31.109441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X.shape, X_train.shape, X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:31.112514Z","iopub.execute_input":"2024-07-03T13:08:31.113019Z","iopub.status.idle":"2024-07-03T13:08:31.122406Z","shell.execute_reply.started":"2024-07-03T13:08:31.112978Z","shell.execute_reply":"2024-07-03T13:08:31.120985Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y.shape, y_train.shape, y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:31.123779Z","iopub.execute_input":"2024-07-03T13:08:31.124207Z","iopub.status.idle":"2024-07-03T13:08:31.146993Z","shell.execute_reply.started":"2024-07-03T13:08:31.12417Z","shell.execute_reply":"2024-07-03T13:08:31.145789Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Model Comparison : Training & Evaluation\n\n# For Model Building\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:31.14872Z","iopub.execute_input":"2024-07-03T13:08:31.149978Z","iopub.status.idle":"2024-07-03T13:08:31.460598Z","shell.execute_reply.started":"2024-07-03T13:08:31.149936Z","shell.execute_reply":"2024-07-03T13:08:31.459168Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models = [LinearRegression, Lasso, Ridge, SVR, DecisionTreeRegressor, RandomForestRegressor]\nmae_scores = []\nmse_scores = []\nrmse_scores = []\nr2_scores = []\n\nfor model in models:\n    regressor = model().fit(X_train, y_train)\n    y_pred = regressor.predict(X_test)\n    \n    mae_scores.append(mean_absolute_error(y_test, y_pred))\n    mse_scores.append(mean_squared_error(y_test, y_pred))\n    rmse_scores.append(mean_squared_error(y_test, y_pred, squared=False))\n    r2_scores.append(r2_score(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:31.461807Z","iopub.execute_input":"2024-07-03T13:08:31.462105Z","iopub.status.idle":"2024-07-03T13:08:32.238809Z","shell.execute_reply.started":"2024-07-03T13:08:31.462079Z","shell.execute_reply":"2024-07-03T13:08:32.237746Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"regression_metrics_df = pd.DataFrame({\n    \"Model\": [\"Linear Regression\", \"Lasso\", \"Ridge\", \"SVR\", \"Decision Tree Regressor\", \"Random Forest Regressor\"],\n    \"Mean Absolute Error\": mae_scores,\n    \"Mean Squared Error\": mse_scores,\n    \"Root Mean Squared Error\": rmse_scores,\n    \"R-squared (R2)\": r2_scores\n})\n\nregression_metrics_df.set_index('Model', inplace=True)\nregression_metrics_df","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:08:32.23986Z","iopub.execute_input":"2024-07-03T13:08:32.240167Z","iopub.status.idle":"2024-07-03T13:08:32.259683Z","shell.execute_reply.started":"2024-07-03T13:08:32.240139Z","shell.execute_reply":"2024-07-03T13:08:32.258066Z"},"trusted":true},"execution_count":null,"outputs":[]}]}