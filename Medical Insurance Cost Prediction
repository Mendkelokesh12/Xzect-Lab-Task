{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8850194,"sourceType":"datasetVersion","datasetId":5327147}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/lokeshmendake/medical-insurance-cost-prediction?scriptVersionId=186696490\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn import datasets\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom six.moves import urllib\n\nwarnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:10.234318Z","iopub.execute_input":"2024-07-03T14:13:10.234782Z","iopub.status.idle":"2024-07-03T14:13:13.238292Z","shell.execute_reply.started":"2024-07-03T14:13:10.234744Z","shell.execute_reply":"2024-07-03T14:13:13.237115Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/medical-insurance-cost-dataset/Medical_Insurance_Data.csv') \ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:13.240468Z","iopub.execute_input":"2024-07-03T14:13:13.241124Z","iopub.status.idle":"2024-07-03T14:13:13.290112Z","shell.execute_reply.started":"2024-07-03T14:13:13.241083Z","shell.execute_reply":"2024-07-03T14:13:13.289074Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('The size of Dataframe is: ', df.shape)\nprint('-'*100)\nprint('The Column Name, Record Count and Data Types are as follows: ')\ndf.info()\nprint('-'*100)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:13.291824Z","iopub.execute_input":"2024-07-03T14:13:13.292264Z","iopub.status.idle":"2024-07-03T14:13:13.318556Z","shell.execute_reply.started":"2024-07-03T14:13:13.292227Z","shell.execute_reply":"2024-07-03T14:13:13.317255Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Defining numerical & categorical columns\nnumeric_features = [feature for feature in df.columns if df[feature].dtype != 'O']\ncategorical_features = [feature for feature in df.columns if df[feature].dtype == 'O']\n\n# print columns\nprint('We have {} numerical features : {}'.format(len(numeric_features), numeric_features))\nprint('\\nWe have {} categorical features : {}'.format(len(categorical_features), categorical_features))","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:13.321561Z","iopub.execute_input":"2024-07-03T14:13:13.322051Z","iopub.status.idle":"2024-07-03T14:13:13.338484Z","shell.execute_reply.started":"2024-07-03T14:13:13.322007Z","shell.execute_reply":"2024-07-03T14:13:13.337368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Missing Value Presence in different columns of DataFrame are as follows : ')\nprint('-'*100)\ntotal=df.isnull().sum().sort_values(ascending=False)\npercent=(df.isnull().sum()/df.isnull().count()*100).sort_values(ascending=False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent'])","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:13.339993Z","iopub.execute_input":"2024-07-03T14:13:13.341026Z","iopub.status.idle":"2024-07-03T14:13:13.369142Z","shell.execute_reply.started":"2024-07-03T14:13:13.340993Z","shell.execute_reply":"2024-07-03T14:13:13.368054Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Summary Statistics of numerical features for DataFrame are as follows:')\nprint('-'*100)\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:13.370504Z","iopub.execute_input":"2024-07-03T14:13:13.370883Z","iopub.status.idle":"2024-07-03T14:13:13.407719Z","shell.execute_reply.started":"2024-07-03T14:13:13.370832Z","shell.execute_reply":"2024-07-03T14:13:13.406505Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Summary Statistics of categorical features for DataFrame are as follows:')\nprint('-'*100)\ndf.describe(include='object').T","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:13.408992Z","iopub.execute_input":"2024-07-03T14:13:13.409319Z","iopub.status.idle":"2024-07-03T14:13:13.429111Z","shell.execute_reply.started":"2024-07-03T14:13:13.409291Z","shell.execute_reply":"2024-07-03T14:13:13.42784Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data Cleaning & Preprocessing\n# Distribution of Age\n\nsns.set()\nplt.figure(figsize=(6,6))\nsns.distplot(df['age'])\nplt.title('Age Distribution')\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:13.430667Z","iopub.execute_input":"2024-07-03T14:13:13.431061Z","iopub.status.idle":"2024-07-03T14:13:13.931251Z","shell.execute_reply.started":"2024-07-03T14:13:13.431023Z","shell.execute_reply":"2024-07-03T14:13:13.929962Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Sex Distribution\n\nplt.figure(figsize=(4,4))\nax = sns.countplot(x='sex', data=df)\nplt.title('Sex Distribution')\n\ncounts = df['sex'].value_counts()\n\nfor i, count in enumerate(counts):\n    ax.text(i, count, str(count), ha='center', va='bottom')\n\nplt.xlabel('Sex')\nplt.ylabel('Count')\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:13.932793Z","iopub.execute_input":"2024-07-03T14:13:13.933264Z","iopub.status.idle":"2024-07-03T14:13:14.199834Z","shell.execute_reply.started":"2024-07-03T14:13:13.933224Z","shell.execute_reply":"2024-07-03T14:13:14.198698Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# BMI Distribution\n\nplt.figure(figsize=(6,6))\nsns.distplot(df['bmi'])\nplt.title('BMI Distribution')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:14.203425Z","iopub.execute_input":"2024-07-03T14:13:14.203778Z","iopub.status.idle":"2024-07-03T14:13:14.634513Z","shell.execute_reply.started":"2024-07-03T14:13:14.203749Z","shell.execute_reply":"2024-07-03T14:13:14.633176Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Children Count Distribution\n\nplt.figure(figsize=(6,6))\nsns.countplot(x='children', data=df)\nplt.title('Children')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:14.636087Z","iopub.execute_input":"2024-07-03T14:13:14.636812Z","iopub.status.idle":"2024-07-03T14:13:14.974105Z","shell.execute_reply.started":"2024-07-03T14:13:14.636757Z","shell.execute_reply":"2024-07-03T14:13:14.972944Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"children_count = df['children'].value_counts()\nchildren_count","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:14.975557Z","iopub.execute_input":"2024-07-03T14:13:14.976646Z","iopub.status.idle":"2024-07-03T14:13:14.987655Z","shell.execute_reply.started":"2024-07-03T14:13:14.9766Z","shell.execute_reply":"2024-07-03T14:13:14.986527Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Smoker Distribution\n\nplt.figure(figsize=(6,6))\nax = sns.countplot(x='smoker', data=df)\nplt.title('smoker')\nplt.xlabel('Smoker')\nplt.ylabel('Count')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:14.989386Z","iopub.execute_input":"2024-07-03T14:13:14.990109Z","iopub.status.idle":"2024-07-03T14:13:15.291211Z","shell.execute_reply.started":"2024-07-03T14:13:14.990067Z","shell.execute_reply":"2024-07-03T14:13:15.289918Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"smoker_counts = df['smoker'].value_counts()\nsmoker_counts","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:15.292833Z","iopub.execute_input":"2024-07-03T14:13:15.293599Z","iopub.status.idle":"2024-07-03T14:13:15.304412Z","shell.execute_reply.started":"2024-07-03T14:13:15.293556Z","shell.execute_reply":"2024-07-03T14:13:15.303256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Region Distribution\n\nplt.figure(figsize=(6,6))\nsns.countplot(x='region', data=df)\nplt.title('region')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:15.307087Z","iopub.execute_input":"2024-07-03T14:13:15.307819Z","iopub.status.idle":"2024-07-03T14:13:15.607776Z","shell.execute_reply.started":"2024-07-03T14:13:15.307778Z","shell.execute_reply":"2024-07-03T14:13:15.606124Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['region'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:15.609817Z","iopub.execute_input":"2024-07-03T14:13:15.610208Z","iopub.status.idle":"2024-07-03T14:13:15.621376Z","shell.execute_reply.started":"2024-07-03T14:13:15.610179Z","shell.execute_reply":"2024-07-03T14:13:15.619555Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Distibution of Insurance Cost\n\nplt.figure(figsize=(6,6))\nsns.distplot(df['charges'])\nplt.title('Medical Cost Distribution')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:15.623847Z","iopub.execute_input":"2024-07-03T14:13:15.624598Z","iopub.status.idle":"2024-07-03T14:13:16.147177Z","shell.execute_reply.started":"2024-07-03T14:13:15.624514Z","shell.execute_reply":"2024-07-03T14:13:16.145896Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Encoding the Categorical Features\n\n# encoding sex column\ndf.replace({'sex':{'male':0,'female':1}}, inplace=True)\n\n3 # encoding 'smoker' column\ndf.replace({'smoker':{'yes':0,'no':1}}, inplace=True)\n\n# encoding 'region' column\ndf.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.14895Z","iopub.execute_input":"2024-07-03T14:13:16.149333Z","iopub.status.idle":"2024-07-03T14:13:16.161988Z","shell.execute_reply.started":"2024-07-03T14:13:16.1493Z","shell.execute_reply":"2024-07-03T14:13:16.160783Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.163564Z","iopub.execute_input":"2024-07-03T14:13:16.164657Z","iopub.status.idle":"2024-07-03T14:13:16.180826Z","shell.execute_reply.started":"2024-07-03T14:13:16.164613Z","shell.execute_reply":"2024-07-03T14:13:16.179662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Model Building\n# Creating Feature Matrix (Independent Variables) & Target Variable (Dependent Variable)\n\n# separating the data and labels\nX = df.drop(columns = ['charges'], axis=1) # Feature matrix\ny = df['charges'] # Target variable","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.182352Z","iopub.execute_input":"2024-07-03T14:13:16.182694Z","iopub.status.idle":"2024-07-03T14:13:16.192695Z","shell.execute_reply.started":"2024-07-03T14:13:16.182659Z","shell.execute_reply":"2024-07-03T14:13:16.191474Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.1941Z","iopub.execute_input":"2024-07-03T14:13:16.194461Z","iopub.status.idle":"2024-07-03T14:13:16.213301Z","shell.execute_reply.started":"2024-07-03T14:13:16.194433Z","shell.execute_reply":"2024-07-03T14:13:16.211989Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.214919Z","iopub.execute_input":"2024-07-03T14:13:16.215293Z","iopub.status.idle":"2024-07-03T14:13:16.230218Z","shell.execute_reply.started":"2024-07-03T14:13:16.215261Z","shell.execute_reply":"2024-07-03T14:13:16.228957Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data Standardization\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.231756Z","iopub.execute_input":"2024-07-03T14:13:16.232314Z","iopub.status.idle":"2024-07-03T14:13:16.248421Z","shell.execute_reply.started":"2024-07-03T14:13:16.232219Z","shell.execute_reply":"2024-07-03T14:13:16.247187Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"standardized_data = scaler.transform(X)\nstandardized_data","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.249973Z","iopub.execute_input":"2024-07-03T14:13:16.25056Z","iopub.status.idle":"2024-07-03T14:13:16.261674Z","shell.execute_reply.started":"2024-07-03T14:13:16.250517Z","shell.execute_reply":"2024-07-03T14:13:16.260333Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = standardized_data\nX","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.263088Z","iopub.execute_input":"2024-07-03T14:13:16.263422Z","iopub.status.idle":"2024-07-03T14:13:16.272996Z","shell.execute_reply.started":"2024-07-03T14:13:16.26339Z","shell.execute_reply":"2024-07-03T14:13:16.27184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train-Test Split\n\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=45)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.274591Z","iopub.execute_input":"2024-07-03T14:13:16.274982Z","iopub.status.idle":"2024-07-03T14:13:16.397905Z","shell.execute_reply.started":"2024-07-03T14:13:16.274949Z","shell.execute_reply":"2024-07-03T14:13:16.396467Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X.shape, X_train.shape, X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.399296Z","iopub.execute_input":"2024-07-03T14:13:16.399642Z","iopub.status.idle":"2024-07-03T14:13:16.405273Z","shell.execute_reply.started":"2024-07-03T14:13:16.399613Z","shell.execute_reply":"2024-07-03T14:13:16.403978Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y.shape, y_train.shape, y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.410097Z","iopub.execute_input":"2024-07-03T14:13:16.410505Z","iopub.status.idle":"2024-07-03T14:13:16.419239Z","shell.execute_reply.started":"2024-07-03T14:13:16.410467Z","shell.execute_reply":"2024-07-03T14:13:16.417986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Model Comparison : Training & Evaluation\n\n# For Model Building\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.420239Z","iopub.execute_input":"2024-07-03T14:13:16.420578Z","iopub.status.idle":"2024-07-03T14:13:16.696893Z","shell.execute_reply.started":"2024-07-03T14:13:16.420548Z","shell.execute_reply":"2024-07-03T14:13:16.695722Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models = [LinearRegression, Lasso, Ridge, SVR, DecisionTreeRegressor, RandomForestRegressor]\nmae_scores = []\nmse_scores = []\nrmse_scores = []\nr2_scores = []\n\nfor model in models:\n    regressor = model().fit(X_train, y_train)\n    y_pred = regressor.predict(X_test)\n    \n    mae_scores.append(mean_absolute_error(y_test, y_pred))\n    mse_scores.append(mean_squared_error(y_test, y_pred))\n    rmse_scores.append(mean_squared_error(y_test, y_pred, squared=False))\n    r2_scores.append(r2_score(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:16.698257Z","iopub.execute_input":"2024-07-03T14:13:16.698602Z","iopub.status.idle":"2024-07-03T14:13:17.200022Z","shell.execute_reply.started":"2024-07-03T14:13:16.698573Z","shell.execute_reply":"2024-07-03T14:13:17.198791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"regression_metrics_df = pd.DataFrame({\n    \"Model\": [\"Linear Regression\", \"Lasso\", \"Ridge\", \"SVR\", \"Decision Tree Regressor\", \"Random Forest Regressor\"],\n    \"Mean Absolute Error\": mae_scores,\n    \"Mean Squared Error\": mse_scores,\n    \"Root Mean Squared Error\": rmse_scores,\n    \"R-squared (R2)\": r2_scores\n})\n\nregression_metrics_df.set_index('Model', inplace=True)\nregression_metrics_df","metadata":{"execution":{"iopub.status.busy":"2024-07-03T14:13:17.201617Z","iopub.execute_input":"2024-07-03T14:13:17.202061Z","iopub.status.idle":"2024-07-03T14:13:17.217277Z","shell.execute_reply.started":"2024-07-03T14:13:17.202021Z","shell.execute_reply":"2024-07-03T14:13:17.216259Z"},"trusted":true},"execution_count":null,"outputs":[]}]}