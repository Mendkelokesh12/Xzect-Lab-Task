{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8850009,"sourceType":"datasetVersion","datasetId":5327034}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/lokeshmendake/credit-card-fraud-detection?scriptVersionId=186692385\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\n# for model buidling\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-03T13:45:01.128352Z","iopub.execute_input":"2024-07-03T13:45:01.128748Z","iopub.status.idle":"2024-07-03T13:45:01.136699Z","shell.execute_reply.started":"2024-07-03T13:45:01.128719Z","shell.execute_reply":"2024-07-03T13:45:01.135416Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/credit-card-fraud-detection-dataset/Heart_Disease_Data.csv') \ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.138955Z","iopub.execute_input":"2024-07-03T13:45:01.139426Z","iopub.status.idle":"2024-07-03T13:45:01.198069Z","shell.execute_reply.started":"2024-07-03T13:45:01.139383Z","shell.execute_reply":"2024-07-03T13:45:01.196901Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('The size of Dataframe is: ', df.shape)\nprint('-'*100)\nprint('The Column Name, Record Count and Data Types are as follows: ')\ndf.info()\nprint('-'*100)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.199451Z","iopub.execute_input":"2024-07-03T13:45:01.199846Z","iopub.status.idle":"2024-07-03T13:45:01.228069Z","shell.execute_reply.started":"2024-07-03T13:45:01.199797Z","shell.execute_reply":"2024-07-03T13:45:01.226848Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Defining numerical & categorical columns\nnumeric_features = [feature for feature in df.columns if df[feature].dtype != 'O']\ncategorical_features = [feature for feature in df.columns if df[feature].dtype == 'O']\n\n# print columns\nprint('We have {} numerical features : {}'.format(len(numeric_features), numeric_features))\nprint('\\nWe have {} categorical features : {}'.format(len(categorical_features), categorical_features))","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.230566Z","iopub.execute_input":"2024-07-03T13:45:01.230999Z","iopub.status.idle":"2024-07-03T13:45:01.239021Z","shell.execute_reply.started":"2024-07-03T13:45:01.23096Z","shell.execute_reply":"2024-07-03T13:45:01.237755Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Missing Value Presence in different columns of DataFrame are as follows : ')\nprint('-'*100)\ntotal=df.isnull().sum().sort_values(ascending=False)\npercent=(df.isnull().sum()/df.isnull().count()*100).sort_values(ascending=False)\npd.concat([total, percent], axis=1, keys=['Total', 'Percent'])","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.240187Z","iopub.execute_input":"2024-07-03T13:45:01.240528Z","iopub.status.idle":"2024-07-03T13:45:01.268079Z","shell.execute_reply.started":"2024-07-03T13:45:01.240499Z","shell.execute_reply":"2024-07-03T13:45:01.266744Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('Summary Statistics of numerical features for DataFrame are as follows:')\nprint('-'*100)\ndf.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.269659Z","iopub.execute_input":"2024-07-03T13:45:01.270071Z","iopub.status.idle":"2024-07-03T13:45:01.328935Z","shell.execute_reply.started":"2024-07-03T13:45:01.270027Z","shell.execute_reply":"2024-07-03T13:45:01.327755Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Model Building\n# Creating Feature Matrix (Independent Variables) & Target Variable (Dependent Variable)\n\n# separating the data and labels\nX = df.drop(columns = ['target'], axis=1) # Feature matrix\ny = df['target'] # Target variable\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.330447Z","iopub.execute_input":"2024-07-03T13:45:01.33088Z","iopub.status.idle":"2024-07-03T13:45:01.337847Z","shell.execute_reply.started":"2024-07-03T13:45:01.33084Z","shell.execute_reply":"2024-07-03T13:45:01.336451Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.340021Z","iopub.execute_input":"2024-07-03T13:45:01.340481Z","iopub.status.idle":"2024-07-03T13:45:01.36728Z","shell.execute_reply.started":"2024-07-03T13:45:01.34044Z","shell.execute_reply":"2024-07-03T13:45:01.365903Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.370658Z","iopub.execute_input":"2024-07-03T13:45:01.371138Z","iopub.status.idle":"2024-07-03T13:45:01.383369Z","shell.execute_reply.started":"2024-07-03T13:45:01.371102Z","shell.execute_reply":"2024-07-03T13:45:01.382116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Data Standardization\n\nscaler = StandardScaler()\nscaler.fit(X)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.384655Z","iopub.execute_input":"2024-07-03T13:45:01.385058Z","iopub.status.idle":"2024-07-03T13:45:01.404873Z","shell.execute_reply.started":"2024-07-03T13:45:01.385024Z","shell.execute_reply":"2024-07-03T13:45:01.403241Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"standardized_data = scaler.transform(X)\nstandardized_data","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.406542Z","iopub.execute_input":"2024-07-03T13:45:01.40772Z","iopub.status.idle":"2024-07-03T13:45:01.421389Z","shell.execute_reply.started":"2024-07-03T13:45:01.407668Z","shell.execute_reply":"2024-07-03T13:45:01.419931Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = standardized_data\nX","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.423233Z","iopub.execute_input":"2024-07-03T13:45:01.423846Z","iopub.status.idle":"2024-07-03T13:45:01.437918Z","shell.execute_reply.started":"2024-07-03T13:45:01.423808Z","shell.execute_reply":"2024-07-03T13:45:01.436601Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train-Test Split\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=45)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.439355Z","iopub.execute_input":"2024-07-03T13:45:01.439842Z","iopub.status.idle":"2024-07-03T13:45:01.454517Z","shell.execute_reply.started":"2024-07-03T13:45:01.439773Z","shell.execute_reply":"2024-07-03T13:45:01.453011Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(X.shape, X_train.shape, X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.456046Z","iopub.execute_input":"2024-07-03T13:45:01.456463Z","iopub.status.idle":"2024-07-03T13:45:01.466097Z","shell.execute_reply.started":"2024-07-03T13:45:01.456432Z","shell.execute_reply":"2024-07-03T13:45:01.464683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y.shape, y_train.shape, y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.467535Z","iopub.execute_input":"2024-07-03T13:45:01.468498Z","iopub.status.idle":"2024-07-03T13:45:01.481111Z","shell.execute_reply.started":"2024-07-03T13:45:01.468458Z","shell.execute_reply":"2024-07-03T13:45:01.47945Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Model Comparison : Training & Evaluation\n\nmodels = [LogisticRegression, SVC, DecisionTreeClassifier, RandomForestClassifier]\naccuracy_scores = []\nprecision_scores = []\nrecall_scores = []\nf1_scores = []\n\nfor model in models:\n    classifier = model().fit(X_train, y_train)\n    y_pred = classifier.predict(X_test)\n    \n    accuracy_scores.append(accuracy_score(y_test, y_pred))\n    precision_scores.append(precision_score(y_test, y_pred))\n    recall_scores.append(recall_score(y_test, y_pred))\n    f1_scores.append(f1_score(y_test, y_pred))\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.482309Z","iopub.execute_input":"2024-07-03T13:45:01.482646Z","iopub.status.idle":"2024-07-03T13:45:01.793457Z","shell.execute_reply.started":"2024-07-03T13:45:01.482619Z","shell.execute_reply":"2024-07-03T13:45:01.792013Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"classification_metrics_df = pd.DataFrame({\n    \"Model\": [\"Logistic Regression\", \"SVM\", \"Decision Tree\", \"Random Forest\"],\n    \"Accuracy\": accuracy_scores,\n    \"Precision\": precision_scores,\n    \"Recall\": recall_scores,\n    \"F1 Score\": f1_scores\n})\n\nclassification_metrics_df.set_index('Model', inplace=True)\nclassification_metrics_df","metadata":{"execution":{"iopub.status.busy":"2024-07-03T13:45:01.794949Z","iopub.execute_input":"2024-07-03T13:45:01.795285Z","iopub.status.idle":"2024-07-03T13:45:01.811619Z","shell.execute_reply.started":"2024-07-03T13:45:01.795257Z","shell.execute_reply":"2024-07-03T13:45:01.810193Z"},"trusted":true},"execution_count":null,"outputs":[]}]}